#include <iostream>
#include <vector>
#include <queue>

struct Node {
    int vertex;
    Node* next;
};

struct Graph {
    int numVertices;
    Node** adjLists;
};

Node* createNode(int vertex) {
    Node* newNode = new Node();
    newNode->vertex = vertex;
    newNode->next = nullptr;
    return newNode;
}

Graph* createGraph(int vertices) {
    Graph* graph = new Graph();
    graph->numVertices = vertices;

 
    graph->adjLists = new Node*[vertices];

    for (int i = 0; i < vertices; i++) {
        graph->adjLists[i] = nullptr;
    }

    return graph;
}

void addEdge(Graph* graph, int src, int dest) {
    Node* newNode = createNode(dest);
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;

    newNode = createNode(src);
    newNode->next = graph->adjLists[dest];
    graph->adjLists[dest] = newNode;
}

// обход в ширину
void bfs(Graph* graph, int startVertex) {
    std::vector<bool> visited(graph->numVertices, false);
    std::queue<int> queue;

    visited[startVertex] = true;
    queue.push(startVertex);

    while (!queue.empty()) {
        int currentVertex = queue.front();
        queue.pop();
        std::cout << currentVertex << " ";

        Node* adjList = graph->adjLists[currentVertex];
        while (adjList != nullptr) {
            int connectedVertex = adjList->vertex;
            if (!visited[connectedVertex]) {
                visited[connectedVertex] = true;
                queue.push(connectedVertex);
            }
            adjList = adjList->next;
        }
    }
}

int main() {
    int vertices = 10; // количество вершин
    Graph* graph = createGraph(vertices);

    addEdge(graph, 0, 1);
    addEdge(graph, 0, 4);
    addEdge(graph, 1, 2); // ребро между 1 и 2
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 4);
    addEdge(graph, 4, 5);
    addEdge(graph, 5, 7);
    addEdge(graph, 2, 8);
    
    std::cout << "обход в ширину начиная с вершины 0:\n";
    bfs(graph, 0);
    std::cout << "\n";

    // Освобождение памяти
    for (int i = 0; i < vertices; i++) {
        Node* adjList = graph->adjLists[i];
        while (adjList != nullptr) {
            Node* temp = adjList;
            adjList = adjList->next;
            delete temp;
        }
    }
    delete[] graph->adjLists;
    delete graph;

    return 0;
}

